package pprint

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func assertStream(t *testing.T, in <-chan streamElt, elements ...string) {
	for _, element := range elements {
		elt, ok := <-in
		if assert.True(t, ok) {
			assert.Equal(t, element, elt.String())
		}
	}
	_, ok := <-in
	assert.False(t, ok)
}

func TestStreamification(t *testing.T) {
	doc := DottedList(Funcall("expr", Text("5")),
		Funcall("add", DottedList(Funcall("expr", Text("7")),
			Funcall("frob"))),
		Funcall("mul", DottedList(Funcall("expr", Text("17"))),
			Funcall("mul", DottedList(Funcall("expr", Text("17")))),
			Funcall("mul", DottedList(Funcall("expr", Text("17"))))))

	ch := toStream(doc)
	assertStream(t, ch,
		`TE(-1,"expr")`,
		`TE(-1,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(-1,"5")`,
		`GEnd(-1)`,
		`NEnd(-1)`,
		`TE(-1,")")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(-1,".")`,
		`TE(-1,"add")`,
		`TE(-1,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(-1,"expr")`,
		`TE(-1,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(-1,"7")`,
		`GEnd(-1)`,
		`NEnd(-1)`,
		`TE(-1,")")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(-1,".")`,
		`TE(-1,"frob")`,
		`TE(-1,"(")`,
		`TE(-1,"")`,
		`TE(-1,")")`,
		`GEnd(-1)`,
		`NEnd(-1)`,
		`GEnd(-1)`,
		`NEnd(-1)`,
		`TE(-1,")")`,
		`CE(-1,".",".","")`,
		`TE(-1,"mul")`,
		`TE(-1,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(-1,"expr")`,
		`TE(-1,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(-1,"17")`,
		`GEnd(-1)`,
		`NEnd(-1)`,
		`TE(-1,")")`,
		`GEnd(-1)`,
		`NEnd(-1)`,
		`TE(-1,",")`,
		`CE(-1," ","","")`,
		`TE(-1,"mul")`,
		`TE(-1,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(-1,"expr")`,
		`TE(-1,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(-1,"17")`,
		`GEnd(-1)`,
		`NEnd(-1)`,
		`TE(-1,")")`,
		`GEnd(-1)`,
		`NEnd(-1)`,
		`GEnd(-1)`,
		`NEnd(-1)`,
		`TE(-1,")")`,
		`TE(-1,",")`,
		`CE(-1," ","","")`,
		`TE(-1,"mul")`,
		`TE(-1,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(-1,"expr")`,
		`TE(-1,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(-1,"17")`,
		`GEnd(-1)`,
		`NEnd(-1)`,
		`TE(-1,")")`,
		`GEnd(-1)`,
		`NEnd(-1)`,
		`GEnd(-1)`,
		`NEnd(-1)`,
		`TE(-1,")")`,
		`GEnd(-1)`,
		`NEnd(-1)`,
		`TE(-1,")")`,
		`GEnd(-1)`,
		`NEnd(-1)`,
	)
}

func TestLastChar(t *testing.T) {
	doc := DottedList(Funcall("expr", Text("5")),
		Funcall("add", DottedList(Funcall("expr", Text("7")),
			Funcall("frob"))),
		Funcall("mul", DottedList(Funcall("expr", Text("17"))),
			Funcall("mul", DottedList(Funcall("expr", Text("17")))),
			Funcall("mul", DottedList(Funcall("expr", Text("17"))))))

	ch := annotateLastChar(toStream(doc))
	assertStream(t, ch,
		`TE(4,"expr")`,
		`TE(5,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(6,"5")`,
		`GEnd(6)`,
		`NEnd(6)`,
		`TE(7,")")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(8,".")`,
		`TE(11,"add")`,
		`TE(12,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(16,"expr")`,
		`TE(17,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(18,"7")`,
		`GEnd(18)`,
		`NEnd(18)`,
		`TE(19,")")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(20,".")`,
		`TE(24,"frob")`,
		`TE(25,"(")`,
		`TE(25,"")`,
		`TE(26,")")`,
		`GEnd(26)`,
		`NEnd(26)`,
		`GEnd(26)`,
		`NEnd(26)`,
		`TE(27,")")`,
		`CE(28,".",".","")`,
		`TE(31,"mul")`,
		`TE(32,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(36,"expr")`,
		`TE(37,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(39,"17")`,
		`GEnd(39)`,
		`NEnd(39)`,
		`TE(40,")")`,
		`GEnd(40)`,
		`NEnd(40)`,
		`TE(41,",")`,
		`CE(42," ","","")`,
		`TE(45,"mul")`,
		`TE(46,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(50,"expr")`,
		`TE(51,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(53,"17")`,
		`GEnd(53)`,
		`NEnd(53)`,
		`TE(54,")")`,
		`GEnd(54)`,
		`NEnd(54)`,
		`GEnd(54)`,
		`NEnd(54)`,
		`TE(55,")")`,
		`TE(56,",")`,
		`CE(57," ","","")`,
		`TE(60,"mul")`,
		`TE(61,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(65,"expr")`,
		`TE(66,"(")`,
		`NBeg(-1)`,
		`GBeg(-1)`,
		`TE(68,"17")`,
		`GEnd(68)`,
		`NEnd(68)`,
		`TE(69,")")`,
		`GEnd(69)`,
		`NEnd(69)`,
		`GEnd(69)`,
		`NEnd(69)`,
		`TE(70,")")`,
		`GEnd(70)`,
		`NEnd(70)`,
		`TE(71,")")`,
		`GEnd(71)`,
		`NEnd(71)`,
	)
}

func TestGBeg(t *testing.T) {
	doc := DottedList(Funcall("expr", Text("5")),
		Funcall("add", DottedList(Funcall("expr", Text("7")),
			Funcall("frob"))),
		Funcall("mul", DottedList(Funcall("expr", Text("17"))),
			Funcall("mul", DottedList(Funcall("expr", Text("17")))),
			Funcall("mul", DottedList(Funcall("expr", Text("17"))))))

	ch := annotateGBeg(annotateLastChar(toStream(doc)))
	assertStream(t, ch,
		`TE(4,"expr")`,
		`TE(5,"(")`,
		`NBeg(-1)`,
		`GBeg(6)`,
		`TE(6,"5")`,
		`GEnd(6)`,
		`NEnd(6)`,
		`TE(7,")")`,
		`NBeg(-1)`,
		`GBeg(71)`,
		`TE(8,".")`,
		`TE(11,"add")`,
		`TE(12,"(")`,
		`NBeg(-1)`,
		`GBeg(26)`,
		`TE(16,"expr")`,
		`TE(17,"(")`,
		`NBeg(-1)`,
		`GBeg(18)`,
		`TE(18,"7")`,
		`GEnd(18)`,
		`NEnd(18)`,
		`TE(19,")")`,
		`NBeg(-1)`,
		`GBeg(26)`,
		`TE(20,".")`,
		`TE(24,"frob")`,
		`TE(25,"(")`,
		`TE(25,"")`,
		`TE(26,")")`,
		`GEnd(26)`,
		`NEnd(26)`,
		`GEnd(26)`,
		`NEnd(26)`,
		`TE(27,")")`,
		`CE(28,".",".","")`,
		`TE(31,"mul")`,
		`TE(32,"(")`,
		`NBeg(-1)`,
		`GBeg(70)`,
		`NBeg(-1)`,
		`GBeg(40)`,
		`TE(36,"expr")`,
		`TE(37,"(")`,
		`NBeg(-1)`,
		`GBeg(39)`,
		`TE(39,"17")`,
		`GEnd(39)`,
		`NEnd(39)`,
		`TE(40,")")`,
		`GEnd(40)`,
		`NEnd(40)`,
		`TE(41,",")`,
		`CE(42," ","","")`,
		`TE(45,"mul")`,
		`TE(46,"(")`,
		`NBeg(-1)`,
		`GBeg(54)`,
		`NBeg(-1)`,
		`GBeg(54)`,
		`TE(50,"expr")`,
		`TE(51,"(")`,
		`NBeg(-1)`,
		`GBeg(53)`,
		`TE(53,"17")`,
		`GEnd(53)`,
		`NEnd(53)`,
		`TE(54,")")`,
		`GEnd(54)`,
		`NEnd(54)`,
		`GEnd(54)`,
		`NEnd(54)`,
		`TE(55,")")`,
		`TE(56,",")`,
		`CE(57," ","","")`,
		`TE(60,"mul")`,
		`TE(61,"(")`,
		`NBeg(-1)`,
		`GBeg(69)`,
		`NBeg(-1)`,
		`GBeg(69)`,
		`TE(65,"expr")`,
		`TE(66,"(")`,
		`NBeg(-1)`,
		`GBeg(68)`,
		`TE(68,"17")`,
		`GEnd(68)`,
		`NEnd(68)`,
		`TE(69,")")`,
		`GEnd(69)`,
		`NEnd(69)`,
		`GEnd(69)`,
		`NEnd(69)`,
		`TE(70,")")`,
		`GEnd(70)`,
		`NEnd(70)`,
		`TE(71,")")`,
		`GEnd(71)`,
		`NEnd(71)`,
	)
}
